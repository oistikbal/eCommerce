name: .NET

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --no-restore --configuration Release
    
    - name: Test with Coverage (Separate Files)
      run: |
        # Create a directory for all coverage results
        mkdir -p ./TestResults
        
        # Run tests with unique coverage outputs for each project
        TEST_PROJECTS=$(find . -name "*.Tests.csproj" -o -name "*Tests.csproj")
        for PROJECT in $TEST_PROJECTS; do
          PROJECT_NAME=$(basename $PROJECT .csproj)
          echo "Running tests for $PROJECT_NAME"
          dotnet test $PROJECT --no-build --configuration Release /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput="./TestResults/$PROJECT_NAME.coverage.cobertura.xml" /p:MergeWith="./TestResults/$PROJECT_NAME.coverage.json"
        done
    
    - name: Install ReportGenerator
      run: dotnet tool install -g dotnet-reportgenerator-globaltool

    - name: Generate merged coverage report
      run: |
        # Get all coverage files from anywhere in the repository
        COVERAGE_FILES=$(find ./Tests -name "*.cobertura.xml" | tr '\n' ';')
        
        if [ -n "$COVERAGE_FILES" ]; then
          echo "Using coverage files: $COVERAGE_FILES"
          reportgenerator -reports:"$COVERAGE_FILES" -targetdir:./CoverageReport -reporttypes:Html;Badges;MarkdownSummary -classfilters:"-eCommerce.ProductService.Protos.V1*;-eCommerce.UserService.Protos.V1*;-eCommerce.ProductService.Migrations*;-eCommerce.UserService.Migrations*" -title:"eCommerce"
          
          # Create README.md for GitHub Pages
          cp ./CoverageReport/Summary.md ./CoverageReport/README.md
        else
          echo "No coverage files found. Creating empty report directory."
          mkdir -p ./CoverageReport
          echo "# No Coverage Data Available" > ./CoverageReport/README.md
        fi
    
    - name: Deploy to GitHub Pages
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./CoverageReport
        force_orphan: true